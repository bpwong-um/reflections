What happens when you initialize a repository? Why do you need to do it?

This command creates an empty Git repository - basically a .git directory with subdirectories for objects,
refs/heads, refs/tags, and template files. An initial HEAD file that references the HEAD of the master
branch is also created.

Initializing the repository sets up the structure required for version control so that files
can be saved with different versions.

================

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area contains the files from the working directory that are to be updated on the repository.  
The value of the staging area is that it allows users to control which files are updated with each commit.

================

How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to add the file(s) to which the logical change was made.  
That way, when the command "git commit" is called, only the file(s) to which the
logical change was made to will be committed to the repository.

================

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

Some situations where branches would help keep my history organized are when
I create different versions of my code, but would like to maintain the original working
version.  That way I can test out different features without any adverse effects.

Branches help by allowing me to work on different versions that are  independent of each other.
If I made a change to one branch, the other branch(es) are unaffected.